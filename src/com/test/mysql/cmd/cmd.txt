/*
CREATE TABLE `stu` (
  `id` int(11) DEFAULT NULL,
  `name` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `sex` varchar(255) DEFAULT NULL,
  `age` int(11) DEFAULT NULL,
  `score` double(4,1) DEFAULT NULL,
  `birthday` date DEFAULT NULL,
  `insert_time` timestamp NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=gbk;

insert into stu(id, name, sex, age) values (1, '张无忌', '男', 18);
insert into stu values(2, '赵敏', '女', 17, 99, null, now());
insert into stu values(3, '张三丰', '男', 50, 60, null, "1997-3-4");
insert into stu values(4, '赵敏', '女', 67, 99, null, now());
insert into stu values(5, '去三并', '男', 35, 100, null, now());
*/
# truncate table stu;
# drop table stu;

# update stu set age = 117 where id = 3;
# update stu set age = 18, score = 100 where id = 2;
# update stu set age = 20;

select * from stu;

/*
select 
		name, -- 姓名
		age   -- 年龄
from 
		stu;	-- 学生表
*/
# select distinct name from stu; -- 去除重复

# 计算age和score之和
# select age, score, age + score from stu -- 如果有null参与的运算，计算结果都为null

# select age, score, age + IFNULL(score, 0) from stu; -- 解决

# 起别名
# select age, score, age + IFNULL(score, 0) as 总和 from stu;
# select age 年龄, score 分数, age + IFNULL(score, 0) 总和 from stu;

# 不等于
# select * from stu where age != 17;
# select * from stu where age <> 17;

# select * from stu where age >= 17 and age < 18;
# select * from stu where age between 17 and 18;

# select * from stu where age = 18 or age = 50;
# select * from stu where age in(18, 50); -- 简化

# select * from stu where score = null; -- 不对的，null不能用等号和不等号判断
# select * from stu where score is null; -- 对的

# select * from stu where score is not null;

# %代表代替任意个字符		_代替一个字符
# select * from stu where name like '张%';
# select * from stu where name like '_三%';

# 姓名三个字的人
# select * from stu where name like '___';

# 姓名中包含忌的人
# select * from stu where name like '%忌%';

# select * from stu order by score; -- 升序排序
# select * from stu order by score ASC; -- 升序排序（越下越高）

# select * from stu order by score DESC; -- 降序排序（越下越低）

# 如果成绩一样，用年龄进行降序排列
# select * from stu order by score, age DESC;

# select count(IFNULL(birthday, 0)) shit from stu;
# select count(id) from stu;

# 某列任意数据不为null
# select count(*) from stu;

/*
select max(score) from stu;
select min(score) from stu;
select sum(score) from stu;
select avg(score) from stu;
*/

# 按性别分组（查询加分组字段和聚合函数，其他无意义）
# select sex 性别, avg(score) 平均分, count(*) 个数 from stu group by sex;

# 分数低于70分的人不参与分组
# select sex 性别, avg(score) 平均分, count(*) 个数 from stu where score > 70 group by sex;

# where在分组前进行限定，having在分组之后进行限定
# where后不能跟聚合函数，having可以进行聚合函数的判断
# select sex 性别, avg(score) 平均分, count(*) 个数 from stu where score > 70 group by sex having count(id) > 1;

# select sex 性别, avg(score) 平均分, count(*) 个数 from stu where score > 70 group by sex having 个数 > 1;

# 分页 limit 开始的索引, 每页查询的条数
# select * from stu limit 0, 2; -- 第一页
# select * from stu limit 2, 2; -- 第二页

# 开始的索引 =（当前页码 - 1）* 每页显示条数
# select * from stu limit 4, 2; -- 第三页

/*
# 非空约束1
create table tea(
		id int,
		name varchar(20) not null -- name为非空
);
*/

# alter table tea modify name varchar(20) not null; -- 非空约束2

# alter table tea modify name varchar(20); -- 删除非空约束2

# drop table tea; 

/*
# 唯一约束（索引） mysql中唯一约束限定仍可以有多个null
create table emp(
		id int, 
		phone_number varchar(20) unique -- 添加唯一约束
);
*/

# alter table emp modify phone_number varchar(20); -- 无法删除
# alter table emp drop index phone_number; -- 正常删除

# alter table emp modify phone_number varchar(20) unique; -- 添加唯一约束 

/*
# 主键约束（非空且唯一，一张表只能有一个字段为主键，是表中记录的唯一标识）
create table tea(
		id int primary key,
		name varchar(20)
);
*/

# alter table tea modify id int; -- 无法删除
# alter table tea drop primary key; -- 正常删除

# alter table tea modify id int primary key; -- 添加主键

# 自动增长，一般配合int主键使用，只跟最后一条记录有关系
# alter table tea modify id int primary key auto_increment;

# insert into tea(id, name) values(null, 'milk tea');

# alter table tea modify id int; -- 删除自动增长

/*
# 外键约束（保证表中数据正确性，让表与表产生关系）
#（一对多，多对一关系）：在多的一方建立外键，指向一的一方的主键
create table dept(
		id int primary key auto_increment,
		name varchar(20) not null,
		addr varchar(20) not null
);
insert into dept(name, addr) values('研发部', '深圳'), ('销售部', '上海');

create table emp(
		id int primary key auto_increment,
		name varchar(20) not null,
		dept_id int not null, -- 外键对应主表的主键
		constraint emp_dept_fk foreign key(dept_id) references dept(id)
		-- 如果不写：（constraint 外键名称），系统则会自动分配一个名称给它
);
insert into emp(name, dept_id) values('张三', 1), ('李四', 1), ('王五', 1), ('李雷', 2), ('小东', 2), ('小明', 2);
*/

# alter table emp drop foreign key emp_dept_fk; -- 删除外键
# alter table emp add constraint emp_dept_fk foreign key(dept_id) references dept(id); -- 添加外键

# 添加外键，设置级联更新和删除（谨慎使用，很危险）
# 级联（cascade）在计算机科学里指多个对象之间的映射关系，建立数据之间的级联关系提高管理效率
# alter table emp add constraint emp_dept_fk foreign key(dept_id) references dept(id) on update cascade on delete cascade;

/*
# 多对多关系，要有中间表，中间表至少包含两个字段作为外键，分别指向两张表的主键
# 如stu(sid, name, age), class(cid, name), t_stu_class(sid, cid);
# stu(1 2, *, *), class(1 2, 英语 数学), t_stu_class(1 1 2, 1 2 2);

# 一般设置联合主键，多个主键之间不重复（constraint stu_class可省略）
# alter table t_stu_class add constraint stu_class primary key(sid, cid);
# 也可以这么表示：
create table t_stu_class(
		sid int,
		cid int, 
		primary key(sid, cid), 
		foreign key(sid) references stu(sid),
		foreign key(cid) references class(cid)
);
*/

# 一对一关系，可以在任意一方添加外键指向另外一方主键，并且让该外键唯一！

# 数据库三大范式
# 范式一（1NF）：每一列都是不可分割的原子列
		# 例子：
				# t(学号，姓名，系（系名，系主任），课程名称，分数） -> 
				# t1(学号，姓名，系名，系主任，课程名称，分数）
		# 存在问题：
				# 1. 存在非常严重的数据冗（rong3）余：姓名、系名、系主任（重复多次）
				# 2. 数据添加存在问题：添加一个新系和系主任时数据不合法（其他为null：无人匹配）
				# 3. 数据删除存在问题：某人毕业，删除数据，系也跟着删除
		
# 范式二（2NF）：在1NF的基础上，非主属性必须依赖于码（消除非主属性对主码的部分函数依赖）
		# 解释：
				# 码：可由此属性或属性组推出全部属性
				# 主属性：码属性组中的所有属性
				# 非主属性：除上述的其他属性
				# 部分函数依赖：某属性确定只需依赖于属性组的某些值
		# 例子：
				# t1 -> 选课表(学号，课程名称，分数)，学生表(学号，姓名，系名，系主任)
				# 主码(学号，课程名称）--> 分数及其他，而分数只能由主码推出，不做处理。
				# 部分函数依赖：主码中的学号就能 --> 姓名，系名，系主任，归为一张学生表处理。 
		# 存在问题：
				# 数据添加、删除存在问题 
				
# 范式三（3NF）：在2NF的基础上，任何非主属性不依赖于其他非主属性（消除传递依赖）		
		# 解释：
				# 传递依赖：A -> B, B -> C
		# 例子：
				# 学生表 -> 学生表(学号，姓名，系名)，系表(系名，系主任)
				# 传递依赖：系主任 -> 系名，系名 -> 学号
		# 存在问题：无
		
# 最终修改方案：
		# t(学号，姓名，系（系名，系主任），课程名称，分数） -> 
		# 1NF：t1(学号，姓名，系名，系主任，课程名称，分数）->
		# 2NF：选课表(学号，课程名称，分数)，学生表(学号，姓名，系名，系主任) ->
		# 3NF：选课表(学号，课程名称，分数)，学生表(学号，姓名，系名)，系表(系名，系主任)
		
# 数据库备份：
		# 备份：
				# mysqldump -uroot -p123456 db1 > C:\Users\Jmc\Desktop\db1.sql
		# 还原：
				# mysql -uroot -p123456;
				# create database db1;
				# use db1;
				# source C:\Users\Jmc\Desktop\db1.sql
						
						
					 
		
