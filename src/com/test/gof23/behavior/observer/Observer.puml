@startuml

class Subject {
    #list : List<Observer>
    +registerObserver(obss: Observer...) : void
    +removeObserver(obs: Observer) : void
    +notifyAllObservers() : void
}

class ConcreteSubject extends Subject {
    -state : int
    +getState() : int
    +setState(state: int) : void
}

interface Observer {
    +update(subject: Subject) : void
}

class ObserverX implements Observer {
    -mystate : int
    +update(subject: Subject) : void
    +getMyState() : int
    +setMyState(myState: int) : void
}

Subject o-> Observer

@enduml